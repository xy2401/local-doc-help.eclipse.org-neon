<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../../styles/carnot.css"
	charset="ISO-8859-1" type="text/css">
<title>Process Models</title>
<script language="JavaScript" src="../../styles/naviLine.js"
	type="text/javascript"></script>
</head>
<body>
<script language="JavaScript" type="text/javascript">
<!--
	writeNavigation("Processes",
		"mg-basics-2.htm","mg-basics-4.htm",
		"../key-concepts.html","Concepts",
		"mg-basics-preface.htm","Workflow Basics");
 -->
</script>
<h1>Process Models</h1>
<p>A Process Model or Workflow Model is a formal description of a business process
containing a set of process definitions and other 
process artifacts. 
All information concerning a process model is stored
in an XPDL file referred to as (Stardust) model file. The file format itself is
described in chapter <a href="../../handbooks/modelling/mg-xml-1.htm">Stardust
File Formats</a>.</p>
<p>A process model can be self-contained or depend on other process models
in one of the following ways:</p>
<ul>
	<li>It can be self-contained in the sense that it contains all model 
	information needed to bootstrap a Stardust runtime environment.</li>
	<li>It may have references to process interfaces 
	or other model elements in different models.
	Please refer to section 
	<a href="../multi-model/creating-ref-models.html#implement">Implementing Process Interfaces</a>
	of the
	<a href="../multi-model/multi-model.html">
	Multi Model Audit Trail Setups</a> concepts for details on
	process interfaces.</li>
	<li>It can implement one or more process interfaces.</li>
</ul>
<p>Workflow models created with Stardust are semantically built on
top of the WfMC Workflow Reference Model (<tt><a
	href="http://www.wfmc.org">www.wfmc.org</a></tt>). Nevertheless, the
Stardust process model adds a lot of functionality and extension points
to the WfMC Workflow Reference Model and can thus be regarded as a
semantic superset.</p>
<ul>
	<li><a href="#comp">Process Model Components</a></li>
	<li><a href="#sets">Process Model Sets</a></li>
	<li><a href="#repos">Model Repository</a></li>
	<li><a href="#deploy">Model Deployment</a></li>
	<li><a href="#open">Open and Closed Models</a></li>
</ul>
<h2 id="comp">Process Model Components</h2>
<p>The following figure shows an overview of the basic
elements used in the process model:</p>

<p class="image"><img src="images/mg-basics-2.jpg" alt=""> <br>
<strong>Figure:</strong> Components of a Process Model</p>
<p>This chapter will make you familiar with the elements of a
process model as interpreted by the Stardust Process Engine.</p>
<p>Your process model or 'model' in short, serves as container
for the business processes in your problem domain with the
following components:</p>
<ul>
	<li>process definitions with its activities</li>
	<li>data,</li>
	<li>resources (roles and organizations),</li>
	<li>applications and</li>
	<li>rendering information for the Stardust Process Workbench.</li>
</ul>
<h2 id="sets">Process Model Sets</h2>
<p>A full set of model deployments with all their links is called a Process Model Set.</p>
<p>Each time a deployment or re-link happens, a snapshot of the resulting Process Model Set is
 stored in the Audit Trail database. At start time of any Root Process Instance the current snapshot
  of the Process Model Set (as defined by the Model containing the Root Process Instance's 
  Process Definition) is associated with the Process Instance. 
  This ensures that during the lifetime of this Process Instance a consistent definition 
  is used (For example, if a Process Interface is invoked multiple times with static resolution, 
  each time the same Implementation is invoked, namely the Primary Implementation at the time 
  of process start).
</p>
<h2 id="repos">Model Repository</h2>
<p>The Stardust Process Workbench maintains its own model repository
of model files. The model repository manages concurrent access to the
model and version control in the modeling environment.</p>

<h2 id="deploy">Model Deployment</h2>
<p>After being ready for execution, process models are deployed to
the runtime environment to be executed by the Stardust Process Engine.
Deployment of a model means storing it in the audit trail together with
some information for the Stardust runtime to evaluate the active model
among all deployed models. Only processes from the active model may be
started but processes from other models already running will continue to
run. Refer to the chapter <a
	href="../admin-concepts/multiversion.html">Working
with Multiple Versions</a> for details on multiple model versions in the runtime
environment.</p>
<p>It is possible to deploy different models into one runtime. This scenario
is described in detail in chapter 
<a href="../multi-model/model-deployment.html">Deploying Different Models into One Runtime</a>
of the 
<a href="../multi-model/multi-model.html">
Concepts of Using Multi Model Audit Trail Setups</a>.</p>
<h2 id="open">Open and Closed Models</h2>
<p>Process models and process model sets are determined as <strong>closed</strong> 
if they either 
do not contain any references to process models or they contain implementing 
process models for all abstract process interfaces that they are using.</p>
<p>In contrast, a process model is called <strong>open</strong> if it is 
not closed as described above.</p>

<script language="JavaScript" type="text/javascript">
<!-- 
writeFooter(); 
-->
</script>
</body>
</html>
