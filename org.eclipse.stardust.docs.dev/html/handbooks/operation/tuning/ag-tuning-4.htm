<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="STYLESHEET" href="../../../styles/carnot.css" charset="ISO-8859-1"
   type="text/css"
>
<title>Stardust Database Access Tuning</title>
<script language="JavaScript" src="../../../styles/naviLine.js"
   type="text/javascript"
></script>
</head>
<body>
<script language="JavaScript" type="text/javascript">
<!--
	writeNavigation("Performance Considerations", 
			"ag-tuning-portal.html", "tuning-performance.html",
			"../../handbooks.htm", "Developer Handbook", "../ag-preface.htm",
			"Operation Guide", "ag-tuning-1.htm", "Tuning Tasks");
//-->
</script>
<h1>Stardust Database Access Tuning</h1>
<p>A general approach for Stardust database access tuning consists of
the following tasks:</p>
<ul>
   <li><a href="#monitoring">Monitoring of the Database Resources</a>
   <ul>
      <li><a href="#exec">Analysis of the Execution Plan of Database
      Queries</a></li>
      <li><a href="#cluster">Cluster Definition and Indexing</a></li>
      <li><a href="#deadlocks">Deadlocks</a></li>
   </ul>
   </li>
   <li><a href="#archive">Archiving Audit Trail Contents</a></li>
   <li><a href="#procclean">Cleaning up Process Instance Hierarchy Entries upon Process Termination</a></li>
   <li><a href="#prepared">Using Prepared Statements</a></li>
</ul>
<h2 id="monitoring">Database Monitoring</h2>
<p>First, you have to identify</p>
<ul>
   <li>query statements being launched by Stardust on the
   Stardust Audit Trail Database and being executed with poor performance
   and</li>
   <li>possibly deadlocks on Stardust Audit Trail Database tables.</li>
</ul>
<p>The appropriate means for this task in general are database specific
tools. Additionally, you may set the Stardust server property:</p>
<p><tt>Carnot.Engine.Tuning.DB.slowStatementTracingThreshold = 500</tt>.</p>
<p>This property sets the threshold duration in milliseconds for all
database statements launched by Stardust . If the threshold is exceeded,
the corresponding statement is logged in the Stardust log. with WARN
priority, e.g.</p>
<p><tt>[06.12.05 12:01:53:443] [ORB.thread.pool : 4] [ WARN] Slow
query: 1085ms SELECT COUNT(*) FROM activity_instance o INNER JOIN
process_instance PR_PI ON (o.processInstance = PR_PI.oid) INNER JOIN data_value
PR_DV1 ON (PR_PI.rootProcessInstance = PR_DV1.processInstance AND PR_DV1.data =
?) INNER JOIN ikr_dcluster_1 PR_DVCL1 ON (PR_PI.rootProcessInstance =</tt></p>
<p><tt>PR_DVCL1.processInstance) WHERE (o.state IN (?, ?) AND
(PR_DVCL1.tk_an_bereich_bs = ? AND PR_DVCL1.sval_an_bereich_bs IN (?, ?, ?, ?,
?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
?, ?, ?, ?, ?, ?, ?, ?)) AND (PR_DV1.type_key = ? AND PR_DV1.string_value = ?)
AND (PR_DVCL1.tk_an_rolle = ? AND PR_DVCL1.sval_an_rolle = ?) AND
(o.currentUserPerformer = ? OR o.currentPerformer = ?))</tt></p>
<p>A useful approach is to identify categories of critical statements with:</p>
<p><tt>&lt;session-name&gt;.UsePreparedStatements = true</tt></p>
<p>and to then deactivate prepared statement to obtain the concrete
parameter values for critical queries (data IDs, process OIDs).</p>
<h3 id="exec">Analysis of the Execution Plan of Database Queries</h3>
<p>Execution plans for critical queries are obtained with the tools provided
by the DBMS in use. You may consult your database administrator for further
details.</p>
<h3 id="cluster">Cluster Definition and Indexing</h3>
<p>The obtained list of critical statements can be used in two ways:</p>
<p>(A) A statement with multiple joins on the <tt>DATA_VALUE</tt> table -
especially if launched very often - is a good candidate for a cluster slot.</p>
<p>Data being used together in predicates</p>
<p><tt>... WHERE ... Data1=? AND Data2=?</tt></p>
<p>should reside in the same cluster.</p>
<p>Additionally, indexes on these clusters might be considered according to
the following principles:</p>
<ul>
   <li>slots with the highest selectivity should appear up front and</li>
   <li>slots being used in OR or IN clauses should appear at the end</li>
</ul>
<p>of the index definition.</p>
<p>(B) With or without clusters being defined, the execution path (table
scans, index scans) has to be considered in detail and known database tuning
mechanisms, like</p>
<ul>
   <li>creating additional indexes or</li>
   <li>remove indexes</li>
</ul>
<p class="Stil1">on cluster and non-cluster tables have to be applied. To
decide on the appropriate approach you have to obtain the <tt>UPDATE/SELECT</tt>
ratio for the tables to be indexed. In any case, theses considerations are not
Stardust -specific and can be recommended by your database administrator
without further knowledge of the Stardust Process Engine.</p>
<p><span class="Stil1">The steps described below can be performed
repeatedly with successively reducing the threshold for critical statements</span>.</p>
<h3 id="deadlocks">Deadlocks</h3>
<p>UPDATE-Deadlocks on data clusters caused by parallel access of two
different threads on disjoint cluster slots can be avoided by splitting up the
cluster. Critical clusters can be obtained from the fields listed in the
corresponding log.</p>
<p>It might also be an approach to change the process model accordingly.</p>
<p>Deadlocks on other Stardust tables can be avoided by specifying
additional indexes on these tables. This approach is also a standard database
administration task and does not require specific knowledge of the Stardust
products. Hence, you might consult your database administrator for further
recommendations.</p>
<h3>Retrieving Generated Keys Directly</h3>
<p>Per default, database generated keys are retrieved on non-sequence
databases after the INSERT statement. To avoid this extra round trip, you can
use the property <strong>AuditTrail.UseJdbcReturnGeneratedKeys</strong>. If you
add this property to the <tt>carnot.properties</tt> file and set it to <tt>true</tt>,
the support provided by JDBC 1.4 for retrieving database generated keys directly
from the INSERT statement will be used instead.</p>
<h2 id="archive">Archiving Audit Trail Contents</h2>
<p>An audit trail database containing data for a large number of processes
may reach a size, where the scalability limits of the used database system are
reached. Usually, a high percentage of the process instances, whose data are
stored in the audit trail database are already terminated. Hence, these process
data can be exported to off line data sources and access only on demand.</p>
<h2 id="procclean">Cleaning up Process Instance Hierarchy Entries upon Process Termination</h2>
<p>To increase performance, you have the option to remove process instance 
hierarchy entries upon process termination. If you set the server-side 
property <strong>Carnot.Engine.Tuning.ProcessTerminationHierarchyCleanup</strong>
in your <tt>carnot.properties</tt> file to <tt>true</tt>, process instance 
hierarchy entries are removed from the table <tt>procinst_hierarchy</tt> 
upon process termination. Per default this property is set to <tt>false</tt>. 
For details on table <tt>procinst_hierarchy</tt>, refer to the
<a href="../audit-trail/ag-appendix-audittrail-1.htm#procinst_hier">
PROCINST_HIERARCHY TABLE</a> description in chapter 
<a href="../audit-trail/ag-appendix-audittrail-1.htm">The Repository Model</a>.</p>
<h2 id="prepared">Using Prepared Statements</h2>
<p>To reduce the number of statements the database needs to parse and
optimize you can use prepared statements. In general, any query that is meant to
be used more than once should be a prepared statement.</p>
<p>Using Prepared SQL Statements is usually estimated to raise performance
by about 10%, no additional action needed. This has to be considered of special
importance for complex queries like the ones issued from the Query API
implementation. Now all queries and updates on the audit trail honor the session
property to use Prepared SQL Statements:</p>
<pre>&lt;session-name&gt;.UsePreparedStatements = false/true/mixed</pre>
<p>Note that value <code>false</code> should only be used for debugging purposes! In production
scenarios please use <code>true</code> or <code>mixed</code> instead.</p>
<p>We recommend to use the <strong>mixed</strong> mode. For example, if
querying for process instances states and activity instance states, the data can
be "unbalanced". Mostly there are a lot of completed and only a few
non-completed states. Regarding the performance, in case such data occur, it is
helpful for the database query analyzer and data access path builder to have the
real values for these unbalanced data and additionally the prepared statements
for general business data.</p>
<p>Note that the <strong>mixed</strong> mode is deprecated. In a later release,
mixed SQL will be done by the engine internally if the property is <code>true</code>.</p>
<p>If prepared statements are used, the corresponding SQL queries will
contain bound values like <tt>?</tt> characters instead of concrete values.</p>
<ul>
   <li><a href="#rest">Restrictions on using Prepared Statements</a></li>
   <li><a href="#oracle">Optimizing the Usage of Prepared Statements by using Oracle's Adaptive Cursor Sharing</a></li>
   <li><a href="#db2">Optimizing the Usage of Prepared Statements with a DB2 Profile</a></li>
</ul>
<h3 id="rest">Restrictions on using Prepared Statements</h3>
<p>Note that prepared statements are explicitly ignored for the following
scenarios:</p>
<ol>
   <li>In case a data cluster is configured, the data slot is configured with
   <tt>ignorePreparedStatements=true</tt> and a query uses this slot.</li>
   <li>If one of the following database fields are used in a query:
   <ul>
      <li><tt>daemon_log.type</tt></li>
      <li><tt>daemon_log.code</tt></li>
      <li><tt>daemon_log.state</tt></li>
      <li><tt>activity_instance.state</tt></li>
      <li><tt>activity_instance.currentUserPerformer</tt></li>
      <li><tt>act_inst_history.state</tt></li>
      <li><tt>act_inst_history.performerKind</tt></li>
      <li><tt>act_inst_history.onBehalfOfKind</tt></li>
      <li><tt>activity_inst_log.type</tt></li>
      <li><tt>structured_data_value.type</tt></li>
      <li><tt>participant.type</tt></li>
      <li><tt>event_binding.type</tt></li>
      <li><tt>log_entry.type</tt></li>
      <li><tt>log_entry.code</tt></li>
      <li><tt>process_instance.state</tt></li>
      <li><tt>process_instance.priority</tt></li>
      <li><tt>workitem.state</tt></li>
      <li><tt>act_inst_property.type_key</tt></li>
      <li><tt>proc_inst_property.type_key</tt></li>
      <li><tt>usergroup_property.type_key</tt></li>
      <li><tt>user_property.type_key </tt></li>
   </ul></li>
</ol>
<h3 id="oracle">Optimizing the Usage of Prepared Statements by using Oracle's Adaptive Cursor Sharing</h3>
<p>Adaptive Cursor Sharing can be used for optimization as it allows the server to compare 
the effectiveness of execution plans between executions with different bind variable values. 
Please refer to Oracle's online documentation for details on the Oracle cursor sharing option,
e.g.
<a href="https://docs.oracle.com/database/121/TGSQL/tgsql_cursor.htm#TGSQL848">
Improving Real-World Performance Through Cursor Sharing</a> of the Oracle Tuning guide.</p>
<h4>Histogram creation</h4>
<p>Using Oracle's adaptive cursor sharing requires a histogram creation. For example use
the following commands to force a histogram creation on column <code>STRING_VALUE</code> 
of table <strong>DATA_VALUE</strong>:</p>
<pre>
EXEC DBMS_STATS.gather_table_stats(NULL, 'DATA_VALUE', method_opt=>'FOR COLUMNS SIZE 254 STRING_VALUE', cascade=>TRUE);

SELECT column_name, histogram FROM user_tab_cols WHERE  table_name = 'DATA_VALUE';
</pre>
<p>Note that the table must not be empty. It has to contain values to force histogram creation.</p>
<p>The following table shows the created histogram for column <code>STRING_VALUE</code>:</p>
<pre>
COLUMN_NAME                    HISTOGRAM
------------------------------ ---------------
OID                            NONE
MODEL                          NONE
DATA                           NONE
STRING_VALUE                   HEIGHT BALANCED
NUMBER_VALUE                   NONE
DOUBLE_VALUE                   NONE
TYPE_KEY                       NONE
PROCESSINSTANCE                NONE
</pre>
<p>If the current schema is different from the schema the histogram table should be created in, use the following syntax:</p>
<pre>
EXEC DBMS_STATS.gather_table_stats('CARNOT', 'DATA_VALUE', method_opt=>'FOR COLUMNS SIZE 254 STRING_VALUE', cascade=>TRUE);

SELECT column_name, histogram FROM ALL_TAB_COLUMNS WHERE owner='CARNOT' AND  table_name = 'DATA_VALUE';
</pre>
<h4>Query Examples</h4>
<p>In the first example, we run a query that uses a bind variable. The table <code>DATA_VALUE</code> has one entry that matches 
<code>data%</code> for <code>string_value</code>. The execution plan shows that the query has used the index.</p>
<pre>
SQL> VARIABLE l_string_value VARCHAR2(128 CHAR);
SQL> EXEC :l_string_value := 'data%';

PL/SQL procedure successfully completed.

SQL>
SQL> SELECT MAX(oid) FROM carnot.data_value WHERE string_value LIKE :l_string_value;

  MAX(OID)
----------
    100006

SQL> SELECT * FROM TABLE(DBMS_XPLAN.display_cursor);

PLAN_TABLE_OUTPUT
---------------------------------------------------------------------------------------------------------
SQL_ID  gzms5fbsmqwmp, child number 1
-------------------------------------
SELECT MAX(oid) FROM carnot.data_value WHERE string_value LIKE
:l_string_value

Plan hash value: 1688810086

---------------------------------------------------------------------------------------------------
| Id  | Operation                    | Name               | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |                    |       |       |     3 (100)|          |

PLAN_TABLE_OUTPUT
---------------------------------------------------------------------------------------------------------
|   1 |  SORT AGGREGATE              |                    |     1 |    23 |            |          |
|   2 |   TABLE ACCESS BY INDEX ROWID| DATA_VALUE         |     1 |    23 |     3   (0)| 00:00:01 |
|*  3 |    INDEX RANGE SCAN          | DATA_VALUES_INDEX5 |     1 |       |     2   (0)| 00:00:01 |
---------------------------------------------------------------------------------------------------</pre>
<p>Now we run a query that uses a bind variable containing a value that matches multiple entries.
The optimizer selects an execution plan that uses full table access.</p>
<pre>
VARIABLE l_string_value VARCHAR2(128 CHAR);
EXEC :l_string_value := '%test2%';

SELECT MAX(oid) FROM carnot.data_value WHERE string_value LIKE :l_string_value;
SELECT * FROM TABLE(DBMS_XPLAN.display_cursor);

SQL> VARIABLE l_string_value VARCHAR2(128 CHAR);
SQL> EXEC :l_string_value := '%test2%';

PL/SQL procedure successfully completed.

SQL>
SQL> SELECT MAX(oid) FROM carnot.data_value WHERE string_value LIKE :l_string_value;

  MAX(OID)
----------
     99986

SQL> SELECT * FROM TABLE(DBMS_XPLAN.display_cursor);

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------
SQL_ID  gzms5fbsmqwmp, child number 3
-------------------------------------
SELECT MAX(oid) FROM carnot.data_value WHERE string_value LIKE
:l_string_value

Plan hash value: 3200669370

---------------------------------------------------------------------------------
| Id  | Operation          | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |            |       |       |   141 (100)|          |

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------
|   1 |  SORT AGGREGATE    |            |     1 |    23 |            |          |
|*  2 |   TABLE ACCESS FULL| DATA_VALUE |  5000 |   112K|   141   (2)| 00:00:02 |
---------------------------------------------------------------------------------</pre>
<p>Now we run the following query:</p>
<pre>
SQL> SELECT sql_id, child_number, is_bind_sensitive, is_bind_aware
  2  FROM   v$sql
  3  WHERE  sql_text = 'SELECT MAX(oid) FROM carnot.data_value WHERE string_value LIKE :l_string_value';
</pre>
<p>Having a look a the output, we can see that, as column <code>is_bind_sensitive</code> displays 
value <code>Y</code>, this query requires different execution plans depending on the bind variable value.
Column <code>is_bind_aware</code> shows that a more efficient execution plan for this query is used.</p>
<pre>
SQL_ID        CHILD_NUMBER I I
------------- ------------ - -
gzms5fbsmqwmp            0 Y N
gzms5fbsmqwmp            1 Y Y
gzms5fbsmqwmp            2 Y Y
gzms5fbsmqwmp            3 Y Y
</pre>
<h3 id="db2">Optimizing the Usage of Prepared Statements with a DB2 Profile</h3>
<p>You can optimize the usage of prepared statements with a DB2 profile, which is described
in this section. With this setup, a new execution plan is created for each executed statement 
specified in the profile.</p>
<p>Please refer to the IBM Knowledge Center site
<a href="https://www-01.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.admin.perf.doc/doc/c0055082.html?lang=en">
Using the REOPT bind option with input variables in complex queries</a>
and to article
<a href="http://www.ibm.com/developerworks/data/library/techarticle/dm-1104db2statementconcentratorreoptimization/">
Improve SQL execution times using the DB2 statement concentrator feature and the DB2 statement reoptimization feature</a>
for details on using the DB2 statement reoptimization feature.</p>
<p>To create and setup a profile for optimization:</p>
<ol>
   <li>Create a profile xml file, e.g. <code>profile1.xml</code>, with the following content:
   <pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;OPTPROFILE VERSION="9.7.2.0"&gt;
   &lt;STMTPROFILE ID="REOPT_QUERY"&gt;
      &lt;STMTKEY&gt;
         &lt;![CDATA[SELECT MAX(oid) FROM data_value WHERE string_value LIKE ?]]&gt;
      &lt;/STMTKEY&gt;
      &lt;OPTGUIDELINES&gt;
         &lt;REOPT VALUE="ALWAYS"/&gt;
      &lt;/OPTGUIDELINES&gt;
   &lt;/STMTPROFILE&gt;
&lt;/OPTPROFILE&gt;
</pre>
   <li>To activate the use of optimization profiles in DB2 the variable <code>DB2_OPTPROFILE</code>
   has to be set to <code>YES</code>. After the change the DB2 server has to be restarted:
   <pre>
db2set DB2_OPTPROFILE=YES
db2stop
db2start</pre></li>
   <li>Use the <code>SYSPROC.SYSINSTALLOBJECTS</code> procedure to create the <code>SYSTOOLS.OPT_PROFILE</code> 
   table for storing the optimization profile:
   <pre>db2 CALL SYSPROC.SYSINSTALLOBJECTS('OPT_PROFILES', 'C', CAST(NULL AS VARCHAR(128)), CAST(NULL AS VARCHAR(128)))</pre></li>
   <li>Create a file, e.g. <code>profile1.del</code>, with the following content:
<pre>"DEMO","PROFILE1","profile1.xml"</pre></li>
   <li>Import the optimization profile in table <code>SYSTOOLS.OPT_PROFILE</code>:
   <pre>db2 IMPORT FROM profile1.del OF DEL MODIFIED BY LOBSINFILE INSERT INTO SYSTOOLS.OPT_PROFILE</pre></li>
   <li>Flush the DB2 optimization profile cache to activate changes to the optimization profiles:
   <pre>db2 FLUSH OPTIMIZATION PROFILE CACHE ALL;</pre></li>
   <li>Adjust the jdbc URL string of the data source and add property 
   <code>optimizationProfile</code>:
   <pre>jdbc:db2://localhost:50000/ipp:optimizationProfile=DEMO.PROFILE1;</pre></li>
</ol>

<script language="JavaScript" type="text/javascript"> 
writeFooter(); 
</script>
</body>
</html>